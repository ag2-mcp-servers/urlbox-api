# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:27:30+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional, Union

from pydantic import AnyUrl, BaseModel, Field, RootModel


class Error(BaseModel):
    code: Optional[str] = Field(None, description='A machine-readable error code')
    message: Optional[str] = Field(None, description='A human-readable error message')


class ErrorResponse(BaseModel):
    error: Error


class RedirectResponse(BaseModel):
    location: AnyUrl = Field(
        ..., description='The URL to follow for the long running request'
    )
    message: str = Field(
        ...,
        description='A human-readable message indicating the need to follow the redirect',
    )


class Format(Enum):
    png = 'png'
    jpg = 'jpg'
    pdf = 'pdf'
    svg = 'svg'
    mp4 = 'mp4'
    webp = 'webp'
    webm = 'webm'
    html = 'html'


class WaitUntil(Enum):
    requestsfinished = 'requestsfinished'
    mostrequestsfinished = 'mostrequestsfinished'
    loaded = 'loaded'
    domloaded = 'domloaded'


class RenderRequest1(BaseModel):
    block_ads: Optional[bool] = Field(
        None, description='Whether to block ads on the rendered page'
    )
    click_accept: Optional[bool] = Field(
        None,
        description='Whether to automatically click accept buttons on the rendered page',
    )
    delay: Optional[str] = Field(
        None,
        description='The amount of milliseconds to delay before taking a screenshot',
    )
    format: Optional[Format] = Field(
        None, description='The format of the rendered output'
    )
    full_page: Optional[bool] = Field(
        None, description='Whether to capture the full page'
    )
    gpu: Optional[bool] = Field(None, description='Whether to enable GPU rendering')
    height: Optional[int] = Field(
        None, description='The viewport height of the rendered output'
    )
    hide_cookie_banners: Optional[bool] = Field(
        None, description='Whether to hide cookie banners on the rendered page'
    )
    html: Optional[str] = Field(
        None, description='The raw HTML to render as an image or video'
    )
    metadata: Optional[bool] = Field(
        None, description='Whether to return metadata about the URL'
    )
    retina: Optional[bool] = Field(
        None, description='Whether to render the image in retina quality'
    )
    selector: Optional[str] = Field(
        None, description='The CSS selector of an element you would like to capture'
    )
    thumb_height: Optional[int] = Field(
        None, description='The height of the thumbnail image'
    )
    thumb_width: Optional[int] = Field(
        None, description='The width of the thumbnail image'
    )
    url: str = Field(..., description='The URL to render as an image or video')
    wait_for: Optional[str] = Field(
        None,
        description='CSS selector of an element to wait to be present in the web page before rendering',
    )
    wait_to_leave: Optional[str] = Field(
        None,
        description='CSS selector of an element, such as a loading spinner, to wait to leave the web page before rendering',
    )
    wait_until: Optional[WaitUntil] = Field(None, description='When')
    width: Optional[int] = Field(
        None, description='The viewport width of the rendered output'
    )


class RenderRequest2(BaseModel):
    block_ads: Optional[bool] = Field(
        None, description='Whether to block ads on the rendered page'
    )
    click_accept: Optional[bool] = Field(
        None,
        description='Whether to automatically click accept buttons on the rendered page',
    )
    delay: Optional[str] = Field(
        None,
        description='The amount of milliseconds to delay before taking a screenshot',
    )
    format: Optional[Format] = Field(
        None, description='The format of the rendered output'
    )
    full_page: Optional[bool] = Field(
        None, description='Whether to capture the full page'
    )
    gpu: Optional[bool] = Field(None, description='Whether to enable GPU rendering')
    height: Optional[int] = Field(
        None, description='The viewport height of the rendered output'
    )
    hide_cookie_banners: Optional[bool] = Field(
        None, description='Whether to hide cookie banners on the rendered page'
    )
    html: str = Field(..., description='The raw HTML to render as an image or video')
    metadata: Optional[bool] = Field(
        None, description='Whether to return metadata about the URL'
    )
    retina: Optional[bool] = Field(
        None, description='Whether to render the image in retina quality'
    )
    selector: Optional[str] = Field(
        None, description='The CSS selector of an element you would like to capture'
    )
    thumb_height: Optional[int] = Field(
        None, description='The height of the thumbnail image'
    )
    thumb_width: Optional[int] = Field(
        None, description='The width of the thumbnail image'
    )
    url: Optional[str] = Field(
        None, description='The URL to render as an image or video'
    )
    wait_for: Optional[str] = Field(
        None,
        description='CSS selector of an element to wait to be present in the web page before rendering',
    )
    wait_to_leave: Optional[str] = Field(
        None,
        description='CSS selector of an element, such as a loading spinner, to wait to leave the web page before rendering',
    )
    wait_until: Optional[WaitUntil] = Field(None, description='When')
    width: Optional[int] = Field(
        None, description='The viewport width of the rendered output'
    )


class RenderRequest(RootModel[Union[RenderRequest1, RenderRequest2]]):
    root: Union[RenderRequest1, RenderRequest2]


class RenderResponse(BaseModel):
    renderUrl: Optional[AnyUrl] = Field(
        None, description='The URL where the rendered output is stored'
    )
    size: Optional[int] = Field(
        None, description='The size of the rendered output in bytes'
    )
